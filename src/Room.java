import java.awt.Rectangle;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.Graphics2D;
import java.util.ArrayList;

public class Room implements KeyListener {

    ArrayList<GameObject> scene = new ArrayList<GameObject>();
    Pacman currentPacman;
    ArrayList<Block> blocks = new ArrayList<Block>();
    int numLives = 3;
    long score = 0L;
    int y = 0; //for debug
    int frame = 0; //for debug

    public Room(int level) {
    	currentPacman = new Pacman();
	int[] board1 = {
	    2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 45, 44, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  1,
	    4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,
	    4,  0, 41, 15, 15, 40,  0, 41, 15, 15, 15, 40,  0, 27, 26,  0, 41, 15, 15, 15, 40,  0, 41, 15, 15, 40,  0,  3,
	    4,  0, 27,  0,  0, 26,  0, 27,  0,  0,  0, 26,  0, 27, 26,  0, 27,  0,  0,  0, 26,  0, 27,  0,  0, 26,  0,  3,
	    4,  0, 43, 22, 22, 42,  0, 43, 22, 22, 22, 42,  0, 43, 42,  0, 43, 22, 22, 22, 42,  0, 43, 22, 22, 42,  0,  3,
	    4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,
	    4,  0, 41, 15, 15, 40,  0, 41, 40,  0, 41, 15, 15, 15, 15, 15, 15, 40,  0, 41, 40,  0, 41, 15, 15, 40,  0,  3,
	    4,  0, 43, 22, 22, 42,  0, 27, 26,  0, 43, 22, 22, 37, 36, 22, 22, 42,  0, 27, 26,  0, 43, 22, 22, 42,  0,  3,
	    4,  0,  0,  0,  0,  0,  0, 27, 26,  0,  0,  0,  0, 27, 26,  0,  0,  0,  0, 27, 26,  0,  0,  0,  0,  0,  0,  3,
	    6, 13, 13, 13, 13, 40,  0, 27, 38, 15, 15, 40,  0, 27, 26,  0, 41, 15, 15, 39, 26,  0, 41, 13, 13, 13, 13,  5,
	    0,  0,  0,  0,  0,  4,  0, 27, 36, 22, 22, 42,  0, 43, 42,  0, 43, 22, 22, 37, 26,  0,  3,  0,  0,  0,  0,  0,
	    0,  0,  0,  0,  0,  4,  0, 27, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27, 26,  0,  3,  0,  0,  0,  0,  0,
	    0,  0,  0,  0,  0,  4,  0, 27, 26,  0, 31, 13, 35, -1, -1, 34, 13, 30,  0, 27, 26,  0,  3,  0,  0,  0,  0,  0,
	   12, 12, 12, 12, 12, 42,  0, 43, 42,  0,  3,  0,  0,  0,  0,  0,  0,  4,  0, 43, 42,  0, 43, 12, 12, 12, 12, 12,
	    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	   13, 13, 13, 13, 13, 40,  0, 41, 40,  0,  3,  0,  0,  0,  0,  0,  0,  4,  0, 41, 40,  0, 41, 13, 13, 13, 13, 13,
	    0,  0,  0,  0,  0,  4,  0, 27, 26,  0, 33, 12, 12, 12, 12, 12, 12, 32,  0, 27, 26,  0,  3,  0,  0,  0,  0,  0,
	    0,  0,  0,  0,  0,  4,  0, 27, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27, 26,  0,  3,  0,  0,  0,  0,  0,
	    0,  0,  0,  0,  0,  4,  0, 27, 26,  0, 41, 15, 15, 15, 15, 15, 15, 40,  0, 27, 26,  0,  3,  0,  0,  0,  0,  0,
	    2, 12, 12, 12, 12, 42,  0, 43, 42,  0, 43, 22, 22, 37, 36, 22, 22, 42,  0, 43, 42,  0, 43, 12, 12, 12, 12,  1,
	    4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,
	    4,  0, 41, 15, 15, 40,  0, 41, 15, 15, 15, 40,  0, 27, 26,  0, 41, 15, 15, 15, 40,  0, 41, 15, 15, 40,  0,  3,
	    4,  0, 43, 22, 37, 26,  0, 43, 22, 22, 22, 42,  0, 43, 42,  0, 43, 22, 22, 22, 42,  0, 27, 36, 22, 42,  0,  3,
	    4,  0,  0,  0, 27, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27, 26,  0,  0,  0,  3,
	    8, 15, 40,  0, 27, 26,  0, 41, 40,  0, 41, 15, 15, 15, 15, 15, 15, 40,  0, 41, 40,  0, 27, 26,  0, 41, 15,  7,
	   10, 22, 42,  0, 43, 42,  0, 27, 26,  0, 43, 22, 22, 37, 36, 22, 22, 42,  0, 27, 26,  0, 43, 42,  0, 43, 22,  9,
	    4,  0,  0,  0,  0,  0,  0, 27, 26,  0,  0,  0,  0, 27, 26,  0,  0,  0,  0, 27, 26,  0,  0,  0,  0,  0,  0,  3,
	    4,  0, 41, 15, 15, 15, 15, 39, 38, 15, 15, 40,  0, 27, 26,  0, 41, 15, 15, 39, 38, 15, 15, 15, 15, 40,  0,  3,
	    4,  0, 43, 22, 22, 22, 22, 22, 22, 22, 22, 42,  0, 43, 42,  0, 43, 22, 22, 22, 22, 22, 22, 22, 22, 42,  0,  3,
	    4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,
	    6, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  5,
	};
	int[] board = board1;
	for (int i=0; i < board.length; i++) {
	    if (board[i] != 0) {
		int m = i%28;
		int n = i/28;
		Block block = new Block(board[i], m, n+3);
		blocks.add(block);
	    }
	}
    }

    public void update(float dt) {
	currentPacman.update(dt);

	//DEBUG
	if (PacmanGame.DEBUG) {
	    y = (int)(100*Math.sin((double)this.frame/10)) + 200;
	    frame++;
	}
    }

    public void draw(Graphics2D g) {
	//Draw Background
	g.setColor(Color.black);
	g.fillRect(0 , 0 , 336 , 492);

	//Draw Blocks
	for (int i = 0; i < blocks.size(); i++) {
	    Block block = blocks.get(i);
	    block.draw(g);
	}

	//DEBUG
	if (PacmanGame.DEBUG) {
	    g.setColor(Color.white); //DEMO...DELETE LATER
	    g.drawLine(0, y, PacmanGame.WIDTH, y); //DEMO...DELETE LATER
	}

	currentPacman.draw(g);

    }

    public void keyPressed(KeyEvent e) {
	currentPacman.keyPressed(e);
	for (int i = 0; i < blocks.size(); i++) {
	    Block block = blocks.get(i);
	    block.keyPressed(e);
	}
    }

    public void keyReleased(KeyEvent e) {

    }

    public void keyTyped(KeyEvent e) {

    }

}

